{
  "openapi": "3.0.1",
  "info": {
    "title": "osu! Tournament Rating API",
    "description": "An API for interacting with the o!TR database",
    "termsOfService": "https://github.com/osu-tournament-rating/otr-wiki/blob/master/api/usage/limits/en.md",
    "version": "v1"
  },
  "paths": {
    "/api/v1/beatmaps": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "List all beatmaps",
        "responses": {
          "200": {
            "description": "Returns all beatmaps",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/beatmaps/{key}": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "Get a beatmap by versatile search",
        "description": "Get a beatmap searching first by id, then by osu! beatmap id",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a beatmap for the search key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a beatmap",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/ratelimit": {
      "patch": {
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Void"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Void"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "parameters": [
          {
            "name": "Mode",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ChartType",
            "in": "query",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/LeaderboardChartType"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/LeaderboardFilterDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Gets all matches",
        "description": "Results are ordered by id and support pagination. All match data is included.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Controls the number of matches to return. Functions as a \"page size\".\r\nDefault: 100 Constraints: Minimum 1, Maximum 5000",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Controls which block of size limit to return.\r\nDefault: 1, Constraints: Minimum 1",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "filterUnverified",
            "in": "query",
            "description": "If unverified matches should be excluded from results\r\nDefault: True, Constraints: Requires admin or system permission if false",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "If query parameters violate constraints",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the desired page of matches",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTOPagedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTOPagedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTOPagedResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/checks/refresh": {
      "post": {
        "tags": [
          "Matches"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/matches/{id}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a match",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a match does not exist for the given id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/duplicates": {
      "get": {
        "tags": [
          "Matches"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/matches/duplicate": {
      "post": {
        "tags": [
          "Matches"
        ],
        "parameters": [
          {
            "name": "rootId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "confirmedDuplicate",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/matches/player/{osuId}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "parameters": [
          {
            "name": "osuId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/{id}/osuid": {
      "get": {
        "tags": [
          "Matches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/{id}/verification-status": {
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Update the verification status of a match",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If a match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the currently logged in user",
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "302": {
            "description": "Redirects to `GET` `/users/{id}`"
          }
        }
      }
    },
    "/api/v1/me/stats": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get player stats for the currently logged in user",
        "description": "If no ruleset is provided, the player's default is used. API.Osu.Enums.Ruleset.Standard is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\n!:PlayerStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date",
        "parameters": [
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "302": {
            "description": "Redirects to `GET` `/stats/{key}`"
          }
        }
      }
    },
    "/api/v1/me/settings/ruleset": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Update the ruleset for the currently logged in user",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "307": {
            "description": "Redirects to `POST` `/users/{id}/settings/ruleset`"
          }
        }
      }
    },
    "/api/v1/me/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Sync the ruleset of the currently logged in user to their osu! ruleset",
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "307": {
            "description": "Redirects to `POST` `/users/{id}/settings/ruleset:sync`"
          }
        }
      }
    },
    "/api/v1/oauth/authorize": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Authorize using an osu! authorization code",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The osu! authorization code",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns user access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              }
            }
          },
          "201": {
            "description": "If there was an error during authorization"
          }
        }
      }
    },
    "/api/v1/oauth/token": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Authorize using client credentials",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "The id of the client",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientSecret",
            "in": "query",
            "description": "The secret of the client",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns client access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              }
            }
          },
          "201": {
            "description": "If there was an error during authorization"
          }
        }
      }
    },
    "/api/v1/oauth/client": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Create a new OAuth client",
        "description": "Client secret is only returned from creation.\r\nThe user will have to reset the secret if they lose access.",
        "responses": {
          "401": {
            "description": "If the user is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns created client credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oauth/refresh": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Generate new access credentials from a valid refresh token",
        "description": "Generated access credentials will contain only a new access token,\r\nand the given refresh token is returned with it",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns access credentials containing a new access token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              }
            }
          },
          "201": {
            "description": "If the given refresh token is invalid, or there was an error during authorization"
          }
        }
      }
    },
    "/api/v1/players/all": {
      "get": {
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/players/{key}/info": {
      "get": {
        "tags": [
          "Players"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerInfoDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerInfoDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/players/ranks/all": {
      "get": {
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerRanksDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerRanksDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerRanksDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/players/id-mapping": {
      "get": {
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerIdMappingDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerIdMappingDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerIdMappingDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/players/country-mapping": {
      "get": {
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerCountryMappingDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerCountryMappingDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerCountryMappingDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/screening": {
      "post": {
        "tags": [
          "Screening"
        ],
        "summary": "Screen a list of users based on the criteria as described in\r\nAPI.DTOs.ScreeningResultDTO",
        "requestBody": {
          "description": "The screening request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScreeningRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScreeningRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScreeningRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScreeningRequestDTO"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Errors encountered during validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The screening result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScreeningResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreeningResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreeningResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for tournaments, matches, and users",
        "description": "Allows for partial or full searching on the names of tournaments, matches, and usernames",
        "parameters": [
          {
            "name": "searchKey",
            "in": "query",
            "description": "The string to match against names of tournaments, matches, and usernames",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all possible tournaments, matches, and usernames for the given search key",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/{key}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get a player's stats",
        "description": "Gets player by versatile search.\r\nIf no ruleset is provided, the player's default is used. API.Osu.Enums.Ruleset.Standard is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key used in versatile search",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a player does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a player's stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/histogram": {
      "get": {
        "tags": [
          "Stats"
        ],
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/ratingadjustments": {
      "post": {
        "tags": [
          "Stats"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RatingAdjustmentDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RatingAdjustmentDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RatingAdjustmentDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RatingAdjustmentDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/stats/matchstats": {
      "post": {
        "tags": [
          "Stats"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlayerMatchStatsDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlayerMatchStatsDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlayerMatchStatsDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlayerMatchStatsDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/stats/ratingstats": {
      "post": {
        "tags": [
          "Stats"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchRatingStatsDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchRatingStatsDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchRatingStatsDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchRatingStatsDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/stats/basestats": {
      "post": {
        "tags": [
          "Stats"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaseStatsPostDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaseStatsPostDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaseStatsPostDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaseStatsPostDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/stats/gamewinrecords": {
      "post": {
        "tags": [
          "Stats"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GameWinRecordDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GameWinRecordDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GameWinRecordDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GameWinRecordDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/stats/matchwinrecords": {
      "post": {
        "tags": [
          "Stats"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchWinRecordDTO"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchWinRecordDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchWinRecordDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchWinRecordDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/stats": {
      "delete": {
        "tags": [
          "Stats"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/tournaments": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all tournaments",
        "description": "Will not include match data",
        "responses": {
          "200": {
            "description": "Returns all tournaments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Submit a tournament",
        "description": "The user submits a tournament (containing metadata and links) to the front-end. They are looking to add new data\r\nto our database that will eventually count towards ratings.\r\n            \r\nThis post endpoint takes these links, validates them (i.e. checks for duplicates,\r\nwhether the match titles align with osu! tournament naming conventions,\r\namount of matches being submitted, etc.).\r\n            \r\nAssuming we have a good batch, we will mark all of the new items as \"PENDING\".\r\nIf verify is true, they will be marked as \"VERIFIED\" immediately.\r\nThe MultiplayerLobbyDataWorker service checks the database for pending links\r\nperiodically and processes them automatically.",
        "parameters": [
          {
            "name": "verify",
            "in": "query",
            "description": "Optionally verify all included matches, assuming the user has permission to do so",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Tournament submission data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentWebSubmissionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentWebSubmissionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentWebSubmissionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentWebSubmissionDTO"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "If the given !:tournamentSubmission is malformed\r\nIf a tournament matching the given name and mode already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If verify is true and the User does not have match verification privileges\r\nIf the authorized user's id does not match the given !:tournamentSubmission.Id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Returns location information for the created tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tournaments/{id}": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get a tournament",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Amend tournament data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Returns the patched tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tournaments/{id}/matches": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Submit matches to an existing tournament",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verify",
            "in": "query",
            "description": "Optionally verify all included matches, assuming the user has permission to do so",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Match submission data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchesWebSubmissionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchesWebSubmissionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchesWebSubmissionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchesWebSubmissionDTO"
              }
            }
          }
        },
        "responses": {
          "403": {
            "description": "If verify is true and the User does not have match verification privileges",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the creation of matches was unsuccessful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelStateEntry"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Returns location information of the created matches",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchCreatedResultDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchCreatedResultDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchCreatedResultDTO"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all matches from a tournament",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all matches from a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/scopes": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's scopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of scopes to assign to the user",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If any of the given scopes are invalid, or the update was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns an updated user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/submissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's match submissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of submissions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/submissions:reject": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Rejects a user's match submissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Denotes the operation was successful"
          },
          "400": {
            "description": "If the operation was not successful"
          }
        }
      }
    },
    "/api/v1/users/{id}/clients": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's OAuth clients",
        "description": "All users have access to clients that they own. Admin users have access to clients from any user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of OAuth clients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/clients/{clientId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's OAuth client",
        "description": "All users have access to delete clients that they own.\r\nAdmin users have access to clients from any user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Id of the OAuth client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user or client does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the deletion was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "If the deletion was successful"
          }
        }
      }
    },
    "/api/v1/users/{id}/clients/{clientId}/secret:reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the secret of a user's OAuth client",
        "description": "All users have access to reset secrets of clients that they own.\r\nAdmin users have access to clients from any user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Id of the OAuth client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user or client does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the secret reset was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns new client credentials if the secret reset was successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sync the ruleset of a user with their osu! ruleset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "If the operation was successful"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AggregatePlayerMatchStatsDTO": {
        "type": "object",
        "properties": {
          "averageMatchCostAggregate": {
            "type": "number",
            "description": "The player's average match cost during the period",
            "format": "double"
          },
          "highestRating": {
            "type": "number",
            "description": "The peak rating achieved by the player during the period",
            "format": "double"
          },
          "highestGlobalRank": {
            "type": "integer",
            "description": "The peak global rank achieved by the player during the period",
            "format": "int32"
          },
          "highestCountryRank": {
            "type": "integer",
            "description": "The peak country rank achieved by the player during the period",
            "format": "int32"
          },
          "highestPercentile": {
            "type": "number",
            "description": "The peak rating percentile achieved by the player during the period",
            "format": "double"
          },
          "ratingGained": {
            "type": "number",
            "description": "The amount of rating gained from the start of the period to the end of the period",
            "format": "double"
          },
          "gamesWon": {
            "type": "integer",
            "description": "The amount of games won during the period",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "The amount of games lost during the period",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "The amount of games played during the period",
            "format": "int32"
          },
          "matchesWon": {
            "type": "integer",
            "description": "The amount of matches won during the period",
            "format": "int32"
          },
          "matchesLost": {
            "type": "integer",
            "description": "The amount of matches lost during the period",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "The amount of matches played during the period",
            "format": "int32",
            "readOnly": true
          },
          "gameWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's game win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "matchWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's match win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "averageTeammateRating": {
            "type": "number",
            "description": "The average rating of the player's teammates during the period. This average does not include the player's own rating",
            "format": "double",
            "nullable": true
          },
          "averageOpponentRating": {
            "type": "number",
            "description": "The average rating of the player's opponents during the period",
            "format": "double",
            "nullable": true
          },
          "bestWinStreak": {
            "type": "integer",
            "description": "The most amount of matches won in a row during the period",
            "format": "int32"
          },
          "matchAverageScoreAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average score across the entire lobby. This average includes\r\nscores for games the player may have not been in for",
            "format": "double"
          },
          "matchAverageMissesAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average miss count of the lobby, across all games in that match",
            "format": "double"
          },
          "matchAverageAccuracyAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average accuracy of the lobby, across all games in that match",
            "format": "double"
          },
          "averageGamesPlayedAggregate": {
            "type": "number",
            "description": "The amount of maps the player participates in, on average.",
            "format": "double"
          },
          "averagePlacingAggregate": {
            "type": "number",
            "description": "The average lobby ranking the player has on maps they participate in.\r\nA top-score is 1, bottom score would be team size * 2",
            "format": "double"
          },
          "periodStart": {
            "type": "string",
            "description": "The beginning of the period for which the statistics are calculated.",
            "format": "date-time"
          },
          "periodEnd": {
            "type": "string",
            "description": "The end of the period for which the statistics are calculated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Represents an aggregate of match statistics for a player during a period of time"
      },
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "readOnly": true,
            "deprecated": true
          },
          "manifestModule": {
            "$ref": "#/components/schemas/Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/SecurityRuleSet"
          }
        },
        "additionalProperties": false
      },
      "BaseStatsDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "rating": {
            "type": "number",
            "description": "Current rating",
            "format": "double"
          },
          "volatility": {
            "type": "number",
            "description": "Current rating volatility measure",
            "format": "double"
          },
          "mode": {
            "type": "integer",
            "description": "osu! ruleset the statistics are derived from",
            "format": "int32"
          },
          "percentile": {
            "type": "number",
            "description": "Current rating percentile",
            "format": "double"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "Total number of matches played",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "description": "Current match win rate",
            "format": "double"
          },
          "highestGlobalRank": {
            "type": "integer",
            "description": "Highest o!tr global ranking",
            "format": "int32"
          },
          "globalRank": {
            "type": "integer",
            "description": "Current o!tr global rank",
            "format": "int32"
          },
          "countryRank": {
            "type": "integer",
            "description": "Current o!tr country rank",
            "format": "int32"
          },
          "averageMatchCost": {
            "type": "number",
            "description": "Current average match cost",
            "format": "double"
          },
          "tournamentsPlayed": {
            "type": "integer",
            "description": "Total number of tournaments played",
            "format": "int32"
          },
          "rankProgress": {
            "$ref": "#/components/schemas/RankProgressDTO"
          },
          "isProvisional": {
            "type": "boolean",
            "description": "Denotes the current rating as being provisional",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents general statistics for a player that are current and not time specific"
      },
      "BaseStatsPostDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "matchCostAverage": {
            "type": "number",
            "format": "double"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "volatility": {
            "type": "number",
            "format": "double"
          },
          "mode": {
            "type": "integer",
            "format": "int32"
          },
          "percentile": {
            "type": "number",
            "format": "double"
          },
          "globalRank": {
            "type": "integer",
            "format": "int32"
          },
          "countryRank": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Used for POSTing base statistics to the API"
      },
      "BeatmapDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the beatmap",
            "format": "int32"
          },
          "artist": {
            "type": "string",
            "description": "Artist of the song"
          },
          "beatmapId": {
            "type": "integer",
            "description": "osu! id of the beatmap",
            "format": "int64"
          },
          "bpm": {
            "type": "number",
            "description": "Beats per minute",
            "format": "double",
            "nullable": true
          },
          "mapperId": {
            "type": "integer",
            "description": "osu! id of the mapper",
            "format": "int64"
          },
          "mapperName": {
            "type": "string",
            "description": "osu! username of the mapper"
          },
          "sr": {
            "type": "number",
            "description": "Star rating",
            "format": "double"
          },
          "cs": {
            "type": "number",
            "description": "Circle size",
            "format": "double"
          },
          "ar": {
            "type": "number",
            "description": "Approach rate",
            "format": "double"
          },
          "hp": {
            "type": "number",
            "description": "Hp",
            "format": "double"
          },
          "od": {
            "type": "number",
            "description": "Overall difficulty",
            "format": "double"
          },
          "drainTime": {
            "type": "number",
            "description": "Drain time",
            "format": "double"
          },
          "length": {
            "type": "number",
            "description": "Song length",
            "format": "double"
          },
          "title": {
            "type": "string",
            "description": "Title of the beatmap / song"
          },
          "diffName": {
            "type": "string",
            "description": "Name of the difficulty",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a beatmap"
      },
      "CallingConventions": {
        "enum": [
          1,
          2,
          3,
          32,
          64
        ],
        "type": "integer",
        "format": "int32"
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          }
        },
        "additionalProperties": false
      },
      "CreatedAtRouteValues": {
        "type": "object",
        "properties": {
          "routeValues": {
            "description": "Any route or query parameters that must be included in the URI",
            "nullable": true
          },
          "action": {
            "type": "string",
            "description": "The controller method that produces the resource",
            "nullable": true
          },
          "controller": {
            "type": "string",
            "description": "The controller that produces the resource",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents data for constructing Microsoft.AspNetCore.Mvc.CreatedResult"
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventAttributes": {
        "enum": [
          0,
          512,
          1024
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "addMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/Type"
          }
        },
        "additionalProperties": false
      },
      "Exception": {
        "type": "object",
        "properties": {
          "targetSite": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "message": {
            "type": "string",
            "readOnly": true
          },
          "data": {
            "type": "object",
            "additionalProperties": { },
            "readOnly": true
          },
          "innerException": {
            "$ref": "#/components/schemas/Exception"
          },
          "helpLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "hResult": {
            "type": "integer",
            "format": "int32"
          },
          "stackTrace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FieldAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          4096,
          8192,
          32768,
          38144
        ],
        "type": "integer",
        "format": "int32"
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/RuntimeFieldHandle"
          }
        },
        "additionalProperties": false
      },
      "GameDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the game",
            "format": "int32"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "scoringType": {
            "$ref": "#/components/schemas/ScoringType"
          },
          "teamType": {
            "$ref": "#/components/schemas/TeamType"
          },
          "mods": {
            "$ref": "#/components/schemas/Mods"
          },
          "gameId": {
            "type": "integer",
            "description": "osu! id of the game",
            "format": "int64"
          },
          "startTime": {
            "type": "string",
            "description": "Timestamp of the beginning of the game",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Timestamp of the end of the game",
            "format": "date-time",
            "nullable": true
          },
          "beatmap": {
            "$ref": "#/components/schemas/BeatmapDTO"
          },
          "matchScores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchScoreDTO"
            },
            "description": "All match scores for the game"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single game (osu! beatmap) played in a match"
      },
      "GameWinRecordDTO": {
        "type": "object",
        "properties": {
          "gameId": {
            "type": "integer",
            "format": "int32"
          },
          "winners": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "losers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "winnerTeam": {
            "type": "integer",
            "format": "int32"
          },
          "loserTeam": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GenericParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          28
        ],
        "type": "integer",
        "format": "int32"
      },
      "ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "LayoutKind": {
        "enum": [
          0,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "LeaderboardChartType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "LeaderboardDTO": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "integer",
            "format": "int32"
          },
          "totalPlayerCount": {
            "type": "integer",
            "format": "int32"
          },
          "filterDefaults": {
            "$ref": "#/components/schemas/LeaderboardFilterDefaultsDTO"
          },
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardPlayerInfoDTO"
            }
          },
          "playerChart": {
            "$ref": "#/components/schemas/LeaderboardPlayerChartDTO"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardFilterDTO": {
        "type": "object",
        "properties": {
          "minRank": {
            "type": "integer",
            "description": "The \"better\" inclusive bound (ranges from 1+)",
            "format": "int32",
            "nullable": true
          },
          "maxRank": {
            "type": "integer",
            "description": "The \"worse\" inclusive bound (ranges from 1+)",
            "format": "int32",
            "nullable": true
          },
          "minRating": {
            "type": "integer",
            "description": "The lower-performing rating bound (ranges from 100+)",
            "format": "int32",
            "nullable": true
          },
          "maxRating": {
            "type": "integer",
            "description": "The higher-performing rating bound (ranges from 100+)",
            "format": "int32",
            "nullable": true
          },
          "minMatches": {
            "type": "integer",
            "description": "The minimum number of matches played (ranges from 1-10000)",
            "format": "int32",
            "nullable": true
          },
          "maxMatches": {
            "type": "integer",
            "description": "The maximum number of matches played (ranges from 1-10000)",
            "format": "int32",
            "nullable": true
          },
          "minWinRate": {
            "type": "number",
            "description": "Ranges from 0.00-1.00",
            "format": "double",
            "nullable": true
          },
          "maxWinRate": {
            "type": "number",
            "description": "Ranges from 0.00-1.00",
            "format": "double",
            "nullable": true
          },
          "tierFilters": {
            "$ref": "#/components/schemas/LeaderboardTierFilterDTO"
          }
        },
        "additionalProperties": false,
        "description": "Filters for the leaderboard"
      },
      "LeaderboardFilterDefaultsDTO": {
        "type": "object",
        "properties": {
          "maxRank": {
            "type": "integer",
            "format": "int32"
          },
          "maxRating": {
            "type": "number",
            "format": "double"
          },
          "maxMatches": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardPlayerChartDTO": {
        "type": "object",
        "properties": {
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "percentile": {
            "type": "number",
            "format": "double"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "matches": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "highestRank": {
            "type": "integer",
            "format": "int32"
          },
          "tier": {
            "type": "string",
            "readOnly": true
          },
          "rankChart": {
            "$ref": "#/components/schemas/PlayerRankChartDTO"
          }
        },
        "additionalProperties": false,
        "description": "DTO for the chart above the main leaderboard, only for logged in users"
      },
      "LeaderboardPlayerInfoDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "format": "int64"
          },
          "globalRank": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "tier": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "matchesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "mode": {
            "type": "integer",
            "format": "int32"
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Individual line items in the leaderboard"
      },
      "LeaderboardTierFilterDTO": {
        "type": "object",
        "properties": {
          "filterBronze": {
            "type": "boolean"
          },
          "filterSilver": {
            "type": "boolean"
          },
          "filterGold": {
            "type": "boolean"
          },
          "filterPlatinum": {
            "type": "boolean"
          },
          "filterEmerald": {
            "type": "boolean"
          },
          "filterDiamond": {
            "type": "boolean"
          },
          "filterMaster": {
            "type": "boolean"
          },
          "filterGrandmaster": {
            "type": "boolean"
          },
          "filterEliteGrandmaster": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "A collection of booleans representing which tiers to filter.\r\n            \r\nFalse = Default, no behavioral change\r\nTrue = Explicitly included in leaderboard results\r\n            \r\nIf *all* tiers are set to false, or all tiers are set to true, the leaderboard will return\r\nas if no tier filters were applied.\r\n            \r\nFor example, if Bronze and Emerald are true and everything else is false,\r\nthen only Bronze and Emerald players will show up in the leaderboard\r\n(specifically, Bronze III-I and Emerald III-I)"
      },
      "MatchCreatedResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the resource",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "URL of where the new resource can be accessed"
          },
          "createdAtRouteValues": {
            "$ref": "#/components/schemas/CreatedAtRouteValues"
          },
          "matchId": {
            "type": "integer",
            "description": "osu! match id",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created match"
      },
      "MatchDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "description": "osu! id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Title of the lobby",
            "nullable": true
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "startTime": {
            "type": "string",
            "description": "Start time of the match",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "description": "End time of the match",
            "format": "date-time",
            "nullable": true
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/MatchVerificationStatus"
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameDTO"
            },
            "description": "List of games played during the match"
          }
        },
        "additionalProperties": false,
        "description": "Represents a played match"
      },
      "MatchDTOPagedResultDTO": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "Link to the next potential page of results",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous potential page of results",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of results included",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDTO"
            },
            "description": "List of resulting data"
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged list of results"
      },
      "MatchRatingStatsDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "format": "int32"
          },
          "matchCost": {
            "type": "number",
            "format": "double"
          },
          "ratingBefore": {
            "type": "number",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "format": "double"
          },
          "ratingChange": {
            "type": "number",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "format": "double"
          },
          "volatilityChange": {
            "type": "number",
            "format": "double"
          },
          "globalRankBefore": {
            "type": "integer",
            "format": "int32"
          },
          "globalRankAfter": {
            "type": "integer",
            "format": "int32"
          },
          "globalRankChange": {
            "type": "integer",
            "format": "int32"
          },
          "countryRankBefore": {
            "type": "integer",
            "format": "int32"
          },
          "countryRankAfter": {
            "type": "integer",
            "format": "int32"
          },
          "countryRankChange": {
            "type": "integer",
            "format": "int32"
          },
          "percentileBefore": {
            "type": "number",
            "format": "double"
          },
          "percentileAfter": {
            "type": "number",
            "format": "double"
          },
          "percentileChange": {
            "type": "number",
            "format": "double"
          },
          "averageTeammateRating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "averageOpponentRating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tooltipInfo": {
            "$ref": "#/components/schemas/MatchTooltipInfoDTO"
          }
        },
        "additionalProperties": false,
        "description": "Used by the API to POST match rating statistics.\r\nAlso used for GET match rating statistics."
      },
      "MatchScoreDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "team": {
            "type": "integer",
            "format": "int32"
          },
          "score": {
            "type": "integer",
            "format": "int64"
          },
          "enabledMods": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "misses": {
            "type": "integer",
            "format": "int32"
          },
          "accuracyStandard": {
            "type": "number",
            "format": "double"
          },
          "accuracyTaiko": {
            "type": "number",
            "format": "double"
          },
          "accuracyCatch": {
            "type": "number",
            "format": "double"
          },
          "accuracyMania": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "MatchSearchResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the match",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a match"
      },
      "MatchSubmissionStatusDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Lobby title of the match",
            "nullable": true
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/MatchVerificationStatus"
          },
          "created": {
            "type": "string",
            "description": "Date that the match was submitted",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Date that the match was last updated",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the status of a submitted match"
      },
      "MatchTooltipInfoDTO": {
        "type": "object",
        "properties": {
          "tournamentName": {
            "type": "string",
            "nullable": true
          },
          "tournamentAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "matchName": {
            "type": "string",
            "nullable": true
          },
          "mpLink": {
            "type": "string"
          },
          "matchDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchVerificationStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "An enum representing the status of a match verification.\r\nVerified matches are considered legitimate and will be used in the rating algorithm.",
        "format": "int32"
      },
      "MatchWinRecordDTO": {
        "type": "object",
        "properties": {
          "matchId": {
            "type": "integer",
            "description": "The id of the match",
            "format": "int32"
          },
          "loserRoster": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of each player on the losing team"
          },
          "winnerRoster": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of each player on the winning team"
          },
          "loserPoints": {
            "type": "integer",
            "description": "The number of points the losing team earned",
            "format": "int32"
          },
          "winnerPoints": {
            "type": "integer",
            "format": "int32"
          },
          "winnerTeam": {
            "type": "integer",
            "description": "The winning team (see !:OsuEnums.Team). Null if HeadToHead.",
            "format": "int32",
            "nullable": true
          },
          "loserTeam": {
            "type": "integer",
            "description": "The losing team (see !:OsuEnums.Team). Null if HeadToHead.",
            "format": "int32",
            "nullable": true
          },
          "matchType": {
            "type": "integer",
            "description": "The type of match (see API.Enums.MatchType). Null if not able to be determined.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of who won and lost a match"
      },
      "MatchesWebSubmissionDTO": {
        "type": "object",
        "properties": {
          "submitterId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The id of the submitting User",
            "format": "int32"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of osu! match ids"
          }
        },
        "additionalProperties": false,
        "description": "Represents data used to add matches to an existing tournament"
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberTypes": {
        "enum": [
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          191
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          53248
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MethodImplAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          4096,
          65535
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/ICustomAttributeProvider"
          }
        },
        "additionalProperties": false
      },
      "ModStatsDTO": {
        "type": "object",
        "properties": {
          "gamesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "gamesWon": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "normalizedAverageScore": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents some information about a player's mod stats.\r\ne.g. how many times has the player played/won with some mod?"
      },
      "ModelError": {
        "type": "object",
        "properties": {
          "exception": {
            "$ref": "#/components/schemas/Exception"
          },
          "errorMessage": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModelStateEntry": {
        "type": "object",
        "properties": {
          "rawValue": {
            "nullable": true
          },
          "attemptedValue": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelError"
            },
            "readOnly": true
          },
          "validationState": {
            "$ref": "#/components/schemas/ModelValidationState"
          },
          "isContainerNode": {
            "type": "boolean",
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelStateEntry"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModelValidationState": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Mods": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          65536,
          131072,
          262144,
          524288,
          1048576,
          1049688,
          2097152,
          4194304,
          8388608,
          16777216,
          33554432,
          67108864,
          134217728,
          268435456,
          521109504,
          522171579,
          536870912,
          1073741824
        ],
        "type": "integer",
        "description": "Represents mod values",
        "format": "int32"
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "readOnly": true
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OAuthClientCreatedDTO": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "description": "Client id of the client",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the client"
          },
          "rateLimitOverrides": {
            "$ref": "#/components/schemas/RateLimitOverrides"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret of the client"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created OAuth client"
      },
      "OAuthClientDTO": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "description": "Client id of the client",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the client"
          },
          "rateLimitOverrides": {
            "$ref": "#/components/schemas/RateLimitOverrides"
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth client"
      },
      "OAuthResponseDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "accessExpiration": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "ParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          4096,
          8192,
          16384,
          32768,
          61440
        ],
        "type": "integer",
        "format": "int32"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PlayerCountryMappingDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerFrequencyDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the teammate or opponent",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the teammate or opponent",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username of the teammate or opponent",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "description": "Number of times this teammate or opponent has played with the player",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a player in the context of a teammate or opponent of another player"
      },
      "PlayerIdMappingDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "PlayerInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the player",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username of the player",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "osu! country code of the player",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents player information"
      },
      "PlayerMatchStatsDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the player",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "description": "The id of the match",
            "format": "int32"
          },
          "won": {
            "type": "boolean",
            "description": "Whether the player (or their team) won this match"
          },
          "averageScore": {
            "type": "number",
            "description": "The player's average score in this match",
            "format": "double"
          },
          "averageMisses": {
            "type": "number",
            "description": "The player's average misses in this match",
            "format": "double"
          },
          "averageAccuracy": {
            "type": "number",
            "description": "The player's average accuracy in this match",
            "format": "double"
          },
          "averagePlacement": {
            "type": "number",
            "description": "The player's average placement in this match",
            "format": "double"
          },
          "gamesWon": {
            "type": "integer",
            "description": "The number of games the player (or their team) won in the match.",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "The number of games the player (or their team) lost in the match.",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "The total number of games the player participated in during this match",
            "format": "int32"
          },
          "teammateIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "opponentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A unique list of player ids that were on the opposing team as the player in this match."
          }
        },
        "additionalProperties": false,
        "description": "Represents a player's match stats"
      },
      "PlayerModStatsDTO": {
        "type": "object",
        "properties": {
          "playedNM": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedEZ": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHT": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHD": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHR": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedDT": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedFL": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHDHR": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHDDT": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHDEZ": {
            "$ref": "#/components/schemas/ModStatsDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in games of differing mod combinations"
      },
      "PlayerRankChartDTO": {
        "type": "object",
        "properties": {
          "chartData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RankChartDataPointDTO"
            }
          }
        },
        "additionalProperties": false
      },
      "PlayerRanksDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "format": "int64"
          },
          "rankStandard": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rankTaiko": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rankCatch": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "rankMania": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "earliestOsuGlobalRank": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "earliestOsuGlobalRankDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "earliestTaikoGlobalRank": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "earliestTaikoGlobalRankDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "earliestCatchGlobalRank": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "earliestCatchGlobalRankDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "earliestManiaGlobalRank": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "earliestManiaGlobalRankDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerRatingChartDTO": {
        "type": "object",
        "properties": {
          "chartData": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlayerRatingChartDataPointDTO"
              }
            },
            "description": "List of data points used to construct the chart"
          }
        },
        "additionalProperties": false,
        "description": "Represents data used to construct a rating delta chart for a player"
      },
      "PlayerRatingChartDataPointDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Match name"
          },
          "matchId": {
            "type": "integer",
            "description": "Match id",
            "format": "int32",
            "nullable": true
          },
          "matchOsuId": {
            "type": "integer",
            "description": "osu! match id",
            "format": "int64",
            "nullable": true
          },
          "matchCost": {
            "type": "number",
            "description": "Match cost of the player",
            "format": "double",
            "nullable": true
          },
          "ratingBefore": {
            "type": "number",
            "description": "Rating of the player before this match occurred",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "description": "Rating of the player after this match occurred",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "description": "Volatility of the player before this match occurred",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "description": "Volatility of the player after this match occurred",
            "format": "double"
          },
          "ratingChange": {
            "type": "number",
            "description": "Difference in rating for the player after this match occurred",
            "format": "double",
            "readOnly": true
          },
          "volatilityChange": {
            "type": "number",
            "description": "Difference in volatility for the player after this match occurred",
            "format": "double",
            "readOnly": true
          },
          "isAdjustment": {
            "type": "boolean",
            "description": "Indicates whether this data point is from a rating change that occurred outside of a match (i.e. decay)"
          },
          "timestamp": {
            "type": "string",
            "description": "Match start time",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data point used to construct a rating chart for a player"
      },
      "PlayerScreeningResultDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the player, if found",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The username of the player, if found",
            "nullable": true
          },
          "osuId": {
            "type": "integer",
            "description": "The osu! id of the player",
            "format": "int64"
          },
          "screeningResult": {
            "$ref": "#/components/schemas/ScreeningResult"
          },
          "screeningFailReason": {
            "$ref": "#/components/schemas/ScreeningFailReason"
          },
          "screeningResultMessage": {
            "type": "string",
            "description": "The API.DTOs.PlayerScreeningResultDTO.ScreeningResult in string form",
            "nullable": true,
            "readOnly": true
          },
          "screeningFailReasonMessage": {
            "type": "string",
            "description": "The API.DTOs.PlayerScreeningResultDTO.ScreeningFailReason in string form",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents one player's screening result"
      },
      "PlayerSearchResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the player",
            "format": "int64"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the player for the given ruleset",
            "format": "double",
            "nullable": true
          },
          "globalRank": {
            "type": "integer",
            "description": "Current global rank of the player for the given ruleset",
            "format": "int32",
            "nullable": true
          },
          "ratingTier": {
            "type": "string",
            "description": "Current rating tier of the player for the given ruleset",
            "nullable": true,
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "osu! username of the player",
            "nullable": true
          },
          "thumbnail": {
            "type": "string",
            "description": "Link to an osu! thumbnail for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a player for a given ruleset"
      },
      "PlayerStatsDTO": {
        "type": "object",
        "properties": {
          "playerInfo": {
            "$ref": "#/components/schemas/PlayerInfoDTO"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "baseStats": {
            "$ref": "#/components/schemas/BaseStatsDTO"
          },
          "matchStats": {
            "$ref": "#/components/schemas/AggregatePlayerMatchStatsDTO"
          },
          "modStats": {
            "$ref": "#/components/schemas/PlayerModStatsDTO"
          },
          "tournamentStats": {
            "$ref": "#/components/schemas/PlayerTournamentStatsDTO"
          },
          "frequentTeammates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's teammates",
            "nullable": true
          },
          "frequentOpponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's opponents",
            "nullable": true
          },
          "ratingChart": {
            "$ref": "#/components/schemas/PlayerRatingChartDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of statistics for a player in a ruleset"
      },
      "PlayerTournamentMatchCostDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "tournamentId": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "tournamentName": {
            "type": "string",
            "description": "Name of the tournament"
          },
          "tournamentAcronym": {
            "type": "string",
            "description": "Abbreviated name of the tournament"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "matchCost": {
            "type": "number",
            "description": "Average match cost across the tournament for the player",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents match cost data across an entire tournament for a player"
      },
      "PlayerTournamentStatsDTO": {
        "type": "object",
        "properties": {
          "teamSizeCounts": {
            "$ref": "#/components/schemas/PlayerTournamentTeamSizeCountDTO"
          },
          "bestPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentMatchCostDTO"
            },
            "description": "List of best tournament performances for the player"
          },
          "recentPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentMatchCostDTO"
            },
            "description": "List of recent tournament performances for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents statistics for a player regarding tournament participation and performance"
      },
      "PlayerTournamentTeamSizeCountDTO": {
        "type": "object",
        "properties": {
          "count1v1": {
            "type": "integer",
            "description": "Number of 1v1 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count2v2": {
            "type": "integer",
            "description": "Number of 2v2 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count3v3": {
            "type": "integer",
            "description": "Number of 3v3 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count4v4": {
            "type": "integer",
            "description": "Number of 4v4 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "countOther": {
            "type": "integer",
            "description": "Number of tournaments played outside of standard team sizes",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in tournaments of differing team sizes"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "PropertyAttributes": {
        "enum": [
          0,
          512,
          1024,
          4096,
          8192,
          16384,
          32768,
          62464
        ],
        "type": "integer",
        "format": "int32"
      },
      "PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "getMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "RankChartDataPointDTO": {
        "type": "object",
        "properties": {
          "tournamentName": {
            "type": "string"
          },
          "matchName": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "rankChange": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "An individual data point for the chart above the main leaderboard, only for logged in users.\r\nSubset of MatchRatingStats.\r\n            \r\nRank can be the global or country rank, depending on how this was requested"
      },
      "RankProgressDTO": {
        "type": "object",
        "properties": {
          "currentTier": {
            "type": "string",
            "description": "Current tier"
          },
          "currentSubTier": {
            "type": "integer",
            "description": "Current sub tier",
            "format": "int32",
            "nullable": true
          },
          "ratingForNextTier": {
            "type": "number",
            "description": "Rating required to reach next sub tier",
            "format": "double"
          },
          "ratingForNextMajorTier": {
            "type": "number",
            "description": "Rating required to reach next major tier",
            "format": "double"
          },
          "nextMajorTier": {
            "type": "string",
            "description": "Next major tier following current tier",
            "nullable": true
          },
          "subTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next sub tier as a percentage",
            "format": "double",
            "nullable": true
          },
          "majorTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next major tier as a percentage",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents rating tier progress data"
      },
      "RateLimitOverrides": {
        "type": "object",
        "properties": {
          "permitLimit": {
            "type": "integer",
            "description": "The number of requests granted per window",
            "format": "int32",
            "nullable": true
          },
          "window": {
            "type": "integer",
            "description": "The length of the window in seconds",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents values used to override the default rate limit configuration"
      },
      "RatingAdjustmentDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "mode": {
            "type": "integer",
            "format": "int32"
          },
          "ratingAdjustmentAmount": {
            "type": "number",
            "format": "double"
          },
          "volatilityAdjustmentAmount": {
            "type": "number",
            "format": "double"
          },
          "ratingBefore": {
            "type": "number",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "format": "double"
          },
          "ratingAdjustmentType": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Used for fetching and posting rating adjustments"
      },
      "Ruleset": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the four osu! play modes",
        "format": "int32"
      },
      "RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "ScoringType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the scoring method (win condition) used for a game",
        "format": "int32"
      },
      "ScreeningFailReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "description": "Explains why the player failed screening",
        "format": "int32"
      },
      "ScreeningRequestDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "description": "The ruleset by which data will be referenced, required",
            "format": "int32"
          },
          "minRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating below this value will be screened",
            "format": "int32",
            "nullable": true
          },
          "maxRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating above this value will be screened",
            "format": "int32",
            "nullable": true
          },
          "allowProvisional": {
            "type": "boolean",
            "description": "Whether to screen players that currently have a provisional rating"
          },
          "tournamentsPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have participated in at least\r\nthis many distinct tournaments",
            "format": "int32",
            "nullable": true
          },
          "peakRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "If set, requires players to have an all-time peak rating less than\r\nthis value",
            "format": "int32",
            "nullable": true
          },
          "matchesPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have played in at least\r\nthis many matches",
            "format": "int32",
            "nullable": true
          },
          "osuPlayerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of osu! player ids that will be screened"
          }
        },
        "additionalProperties": false,
        "description": "Represents a set of criteria used by the API.Controllers.ScreeningController\r\nto determine player eligibility for a tournament"
      },
      "ScreeningResult": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Indicates whether a player passed or failed screening",
        "format": "int32"
      },
      "ScreeningResultDTO": {
        "type": "object",
        "properties": {
          "playersPassed": {
            "type": "integer",
            "description": "The number of players who passed screening",
            "format": "int32"
          },
          "playersFailed": {
            "type": "integer",
            "description": "The number of players who failed screening",
            "format": "int32"
          },
          "screeningResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerScreeningResultDTO"
            },
            "description": "A collection of screening results, one per submitted player,\r\nin the same order as submitted in the API.DTOs.ScreeningRequestDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents a screenings result for a collection of players"
      },
      "SearchResponseCollectionDTO": {
        "type": "object",
        "properties": {
          "tournaments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentSearchResultDTO"
            },
            "description": "A collection of search results for tournaments matching the search query"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchSearchResultDTO"
            },
            "description": "A collection of search results for matches matching the search query"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSearchResultDTO"
            },
            "description": "A collection of search results for players matching the search query"
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of search results"
      },
      "SecurityRuleSet": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/LayoutKind"
          }
        },
        "additionalProperties": false
      },
      "TeamType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the team type used for a game",
        "format": "int32"
      },
      "TournamentCreatedResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the resource",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "URL of where the new resource can be accessed"
          },
          "createdAtRouteValues": {
            "$ref": "#/components/schemas/CreatedAtRouteValues"
          },
          "name": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchCreatedResultDTO"
            },
            "description": "List of created matches"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created tournament"
      },
      "TournamentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "forumUrl": {
            "type": "string",
            "description": "The osu! forum post advertising this tournament"
          },
          "rankRangeLowerBound": {
            "type": "integer",
            "description": "Lowest rank a player can be to participate in the tournament",
            "format": "int32"
          },
          "mode": {
            "type": "integer",
            "description": "osu! ruleset",
            "format": "int32"
          },
          "teamSize": {
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of submission for the tournament",
            "format": "date-time"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDTO"
            },
            "description": "All associated match data"
          }
        },
        "additionalProperties": false,
        "description": "Represents a tournament"
      },
      "TournamentSearchResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "teamSize": {
            "type": "integer",
            "description": "Expected team size of the tournament",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the tournament"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a tournament"
      },
      "TournamentWebSubmissionDTO": {
        "type": "object",
        "properties": {
          "submitterId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The id of the submitting User",
            "format": "int32"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of osu! match ids"
          },
          "tournamentName": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "forumPost": {
            "type": "string",
            "description": "The osu! forum post advertising this tournament"
          },
          "rankRangeLowerBound": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lowest rank a player can be to participate in the tournament",
            "format": "int32"
          },
          "teamSize": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "mode": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "description": "osu! ruleset",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents data used to create a tournament"
      },
      "Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "isFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnmanagedFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TypeAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          24,
          32,
          128,
          256,
          1024,
          2048,
          4096,
          8192,
          16384,
          65536,
          131072,
          196608,
          262144,
          264192,
          1048576,
          12582912
        ],
        "type": "integer",
        "format": "int32"
      },
      "TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "isFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnmanagedFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstructorInfo"
            },
            "readOnly": true
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfo"
            },
            "readOnly": true
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            },
            "readOnly": true
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "readOnly": true
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodInfo"
            },
            "readOnly": true
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "readOnly": true
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInfo"
            },
            "readOnly": true
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the user",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the user",
            "nullable": true
          },
          "playerId": {
            "type": "integer",
            "description": "Id of the associated player",
            "format": "int32",
            "nullable": true
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the associated player",
            "format": "int64",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "osu! country country code of the associated player",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "osu! username of the associated player",
            "nullable": true
          },
          "settings": {
            "$ref": "#/components/schemas/UserSettingsDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents user account information"
      },
      "UserSettingsDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "rulesetIsControlled": {
            "type": "boolean",
            "description": "Denotes whether the associated user has overwritten their default ruleset"
          }
        },
        "additionalProperties": false,
        "description": "Represents user controlled settings for otr-web"
      },
      "Void": {
        "type": "object",
        "additionalProperties": false
      }
    }
  }
}